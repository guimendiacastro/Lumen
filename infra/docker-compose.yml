# lumen/infra/docker-compose.yml
name: lumen-infra

services:
  postgres:
    # Use ankane/pgvector image which includes pgvector pre-installed
    image: ankane/pgvector:v0.5.1
    container_name: lumen-postgres
    restart: unless-stopped
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres/initdb:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - lumen-net
    command:
      - "postgres"
      - "-c"
      - "shared_preload_libraries=vector"
      - "-c"
      - "max_connections=200"

  vault:
    image: hashicorp/vault:1.15
    container_name: lumen-vault
    restart: unless-stopped
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_DEV_ROOT_TOKEN_ID}
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    command: >
      vault server
      -dev
      -dev-root-token-id=${VAULT_DEV_ROOT_TOKEN_ID}
      -dev-listen-address=0.0.0.0:8200
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8200/v1/sys/health | grep -q '\"sealed\":false'"]
      interval: 5s
      timeout: 5s
      retries: 30
    networks:
      - lumen-net

  vault-init:
    image: hashicorp/vault:1.15
    container_name: lumen-vault-init
    depends_on:
      vault:
        condition: service_healthy
    environment:
      VAULT_ADDR: http://lumen-vault:8200
      VAULT_TOKEN: ${VAULT_DEV_ROOT_TOKEN_ID}
    entrypoint: ["/bin/sh", "-c"]
    command: ["sh /init-transit.sh"]
    volumes:
      - ./vault/init-transit.sh:/init-transit.sh:ro
    networks:
      - lumen-net
    restart: "no"

networks:
  lumen-net:
    driver: bridge

volumes:
  pgdata: